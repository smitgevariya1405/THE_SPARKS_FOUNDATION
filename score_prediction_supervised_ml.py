# -*- coding: utf-8 -*-
"""Score_prediction_supervised_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kCGbinG8_P0MBlnmVXd3vCT9lxPd3OYI
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#reading the data
data=pd.read_csv("http://bit.ly/w-data")
data.head(4)
data
data.shape
data.isnull==True

#plotting the data
plt.xlabel('Hours',fontsize=15)
plt.ylabel('Scores',fontsize=15)
plt.scatter(data.Hours,data.Scores)
plt.show()

x=data.iloc[:,:-1].values
y=data.iloc[:,1].values
x
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.2)

print("shape of x_train:",x_train.shape)
print("shape of x_test:",x_test.shape)
print("shape of y_train:",y_train.shape)
print("shape of y_test:",y_test.shape)

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)
b0=lr.intercept_
b1=lr.coef_
print(b0,b1)

y0=b0+b1*x_train
print(y0)

#plotting the line y0
plt.xlabel('Hours',fontsize=15)
plt.ylabel('score',fontsize=15)
plt.scatter(x_train,y_train,marker='+')
plt.plot(x_train,y0,color='orange')
plt.show()

y_pred=lr.predict(x_test)
y_pred

plt.xlabel('Hours',fontsize=15)
plt.ylabel('score',fontsize=15)
plt.scatter(x_test,y_test,marker='*')
plt.plot(x_test,y_pred,color='red')
plt.show()

"""**Comparison**"""
test=list(y_test)
pred=list(y_pred)
compare=pd.DataFrame({'Actual':test,'predicted':pred})
compare

"""**Accuracy**"""
#metrics.r2_score(): This function calculates the coefficient of determination (R-squared) between the actual target values (y_test) and the predicted target values (y_pred).
from sklearn import metrics
metrics.r2_score(y_test,y_pred)

"""**Error prediction**"""
from sklearn.metrics import mean_squared_error,mean_absolute_error
mse=metrics.mean_squared_error(y_test,y_pred)
root=np.sqrt(metrics.mean_squared_error(y_test,y_pred))
mae=np.sqrt(metrics.mean_squared_error(y_test,y_pred))
print(mse,root,mae)

prediction_score=lr.predict([[5.5]])
prediction_score